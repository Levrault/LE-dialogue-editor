; Engine configuration file.
; It's best edited using the editor UI and not directly,
; since the parameters that go here are not all obvious.
;
; Format:
;   [section] ; section goes between []
;   param=value ; assign values to parameters

config_version=4

_global_script_classes=[ {
"base": "Button",
"class": "AddButton",
"language": "GDScript",
"path": "res://src/Nodes/AddButton.gd"
}, {
"base": "MenuButton",
"class": "AnimatedMenuButton",
"language": "GDScript",
"path": "res://src/Generic/AnimatedMenuButton.gd"
}, {
"base": "ToolButton",
"class": "AnimatedToolButton",
"language": "GDScript",
"path": "res://src/Generic/AnimatedToolButton.gd"
}, {
"base": "LineEdit",
"class": "FieldInput",
"language": "GDScript",
"path": "res://src/Nodes/FieldInput.gd"
}, {
"base": "GraphNode",
"class": "GraphEditorNode",
"language": "GDScript",
"path": "res://src/Editor/GraphEditorNode.gd"
}, {
"base": "Node",
"class": "Parser",
"language": "GDScript",
"path": "res://src/Utils/Parser.gd"
}, {
"base": "PanelContainer",
"class": "PopInPanel",
"language": "GDScript",
"path": "res://src/Toolbox/PreviewView/PopInPanel.gd"
}, {
"base": "OptionButton",
"class": "PortraitOptions",
"language": "GDScript",
"path": "res://src/Nodes/Fields/PortraitOptions.gd"
}, {
"base": "MarginContainer",
"class": "PreviewChoice",
"language": "GDScript",
"path": "res://src/Toolbox/PreviewView/PreviewChoice/PreviewChoice.gd"
}, {
"base": "CheckBox",
"class": "RadioButton",
"language": "GDScript",
"path": "res://src/Generic/RadioButton.gd"
}, {
"base": "Control",
"class": "ResizableWindow",
"language": "GDScript",
"path": "res://src/Tools/ResizableWindow.gd"
}, {
"base": "HBoxContainer",
"class": "TimelineField",
"language": "GDScript",
"path": "res://src/Toolbox/PreviewView/Form/TimelineField.gd"
}, {
"base": "Node",
"class": "UpdateTool",
"language": "GDScript",
"path": "res://src/Utils/UpdateTool.gd"
}, {
"base": "FileDialog",
"class": "WorkspaceFormDialog",
"language": "GDScript",
"path": "res://src/WelcomePage/Workspace/Dialog/WorkspaceFormDialog.gd"
} ]
_global_script_class_icons={
"AddButton": "",
"AnimatedMenuButton": "",
"AnimatedToolButton": "",
"FieldInput": "",
"GraphEditorNode": "",
"Parser": "",
"PopInPanel": "",
"PortraitOptions": "",
"PreviewChoice": "",
"RadioButton": "",
"ResizableWindow": "",
"TimelineField": "",
"UpdateTool": "",
"WorkspaceFormDialog": ""
}

[Info]

version="v1.0.3"
wiki="https://github.com/Levrault/levrault-dialogue-editor/wiki"
github="https://github.com/Levrault/levrault-dialogue-editor"
twitter="https://twitter.com/LFLangis"
license=" GPL-3.0 License"
creator="Luc-Frédéric Langis (Levrault)"

[application]

config/name="LE-dialogue-editor"
config/description="LE Dialogue Editor is an standalone application, made with the Godot Engine, created with the main purpose to manage tiny but complex dialogues."
run/main_scene="res://src/WelcomePage/WelcomePage.tscn"
boot_splash/image="res://icon.png"
boot_splash/use_filter=false
boot_splash/bg_color=Color( 0.141176, 0.141176, 0.141176, 0 )
config/icon="res://icon.png"
config/macos_native_icon="res://icon.icns"
config/windows_native_icon="res://icon.ico"

[autoload]

Constant="*res://src/Autoload/Constant.gd"
Events="*res://src/Autoload/Events.gd"
Uuid="*res://src/Autoload/Uuid.gd"
Config="*res://src/Autoload/Config.gd"
FileManager="*res://src/Autoload/FileManager.gd"
Editor="*res://src/Autoload/Editor.gd"
FileReader="*res://src/Autoload/FileReader.gd"
Store="*res://src/Autoload/Store.gd"
Serialize="*res://src/Autoload/Serialize.gd"
Operator="*res://src/Autoload/Operator.gd"

[debug]

gdscript/warnings/unused_variable=false
gdscript/warnings/shadowed_variable=false
gdscript/warnings/unused_argument=false
gdscript/warnings/unused_signal=false
gdscript/warnings/return_value_discarded=false

[display]

window/size/width=1280
window/size/height=720
window/per_pixel_transparency/allowed=true

[input]

add_dialogue={
"deadzone": 0.5,
"events": [ Object(InputEventKey,"resource_local_to_scene":false,"resource_name":"","device":0,"alt":true,"shift":false,"control":false,"meta":false,"command":false,"pressed":false,"scancode":68,"unicode":0,"echo":false,"script":null)
 ]
}
add_choice={
"deadzone": 0.5,
"events": [ Object(InputEventKey,"resource_local_to_scene":false,"resource_name":"","device":0,"alt":true,"shift":false,"control":false,"meta":false,"command":false,"pressed":false,"scancode":67,"unicode":0,"echo":false,"script":null)
 ]
}
add_condition={
"deadzone": 0.5,
"events": [ Object(InputEventKey,"resource_local_to_scene":false,"resource_name":"","device":0,"alt":true,"shift":false,"control":false,"meta":false,"command":false,"pressed":false,"scancode":70,"unicode":0,"echo":false,"script":null)
 ]
}
add_signal={
"deadzone": 0.5,
"events": [ Object(InputEventKey,"resource_local_to_scene":false,"resource_name":"","device":0,"alt":true,"shift":false,"control":false,"meta":false,"command":false,"pressed":false,"scancode":87,"unicode":0,"echo":false,"script":null)
 ]
}
new_scene={
"deadzone": 0.5,
"events": [ Object(InputEventKey,"resource_local_to_scene":false,"resource_name":"","device":0,"alt":false,"shift":false,"control":true,"meta":false,"command":true,"pressed":false,"scancode":78,"unicode":0,"echo":false,"script":null)
 ]
}
save_file={
"deadzone": 0.5,
"events": [ Object(InputEventKey,"resource_local_to_scene":false,"resource_name":"","device":0,"alt":false,"shift":false,"control":true,"meta":false,"command":true,"pressed":false,"scancode":83,"unicode":0,"echo":false,"script":null)
 ]
}
save_as={
"deadzone": 0.5,
"events": [ Object(InputEventKey,"resource_local_to_scene":false,"resource_name":"","device":0,"alt":false,"shift":true,"control":true,"meta":false,"command":true,"pressed":false,"scancode":83,"unicode":0,"echo":false,"script":null)
 ]
}
export_file={
"deadzone": 0.5,
"events": [  ]
}
open_file={
"deadzone": 0.5,
"events": [ Object(InputEventKey,"resource_local_to_scene":false,"resource_name":"","device":0,"alt":false,"shift":false,"control":true,"meta":false,"command":true,"pressed":false,"scancode":79,"unicode":0,"echo":false,"script":null)
 ]
}
preview={
"deadzone": 0.5,
"events": [ Object(InputEventKey,"resource_local_to_scene":false,"resource_name":"","device":0,"alt":false,"shift":false,"control":true,"meta":false,"command":true,"pressed":false,"scancode":80,"unicode":0,"echo":false,"script":null)
 ]
}
workspace_explorer_drawer={
"deadzone": 0.5,
"events": [ Object(InputEventKey,"resource_local_to_scene":false,"resource_name":"","device":0,"alt":false,"shift":false,"control":true,"meta":false,"command":true,"pressed":false,"scancode":66,"unicode":0,"echo":false,"script":null)
 ]
}
left_click={
"deadzone": 0.5,
"events": [ Object(InputEventMouseButton,"resource_local_to_scene":false,"resource_name":"","device":0,"alt":false,"shift":false,"control":false,"meta":false,"command":false,"button_mask":0,"position":Vector2( 0, 0 ),"global_position":Vector2( 0, 0 ),"factor":1.0,"button_index":1,"pressed":false,"doubleclick":false,"script":null)
 ]
}
right_click={
"deadzone": 0.5,
"events": [ Object(InputEventMouseButton,"resource_local_to_scene":false,"resource_name":"","device":0,"alt":false,"shift":false,"control":false,"meta":false,"command":false,"button_mask":0,"position":Vector2( 0, 0 ),"global_position":Vector2( 0, 0 ),"factor":1.0,"button_index":2,"pressed":false,"doubleclick":false,"script":null)
 ]
}
toggle_debug_mode={
"deadzone": 0.5,
"events": [ Object(InputEventKey,"resource_local_to_scene":false,"resource_name":"","device":0,"alt":false,"shift":false,"control":false,"meta":false,"command":false,"pressed":false,"scancode":16777255,"unicode":0,"echo":false,"script":null)
 ]
}

[locale]

test="en"
locale_filter=[ 0, [  ] ]

[logging]

file_logging/enable_file_logging=true
file_logging/log_path="user://logs/log.log"

[rendering]

quality/driver/fallback_to_gles2=true
environment/default_environment="res://default_env.tres"
